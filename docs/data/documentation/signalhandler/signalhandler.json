{"variants":[{"paths":["\/documentation\/signalhandler\/signalhandler"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/SignalHandler\/documentation\/SignalHandler\/SignalHandler","interfaceLanguage":"swift"},"schemaVersion":{"minor":3,"major":0,"patch":0},"metadata":{"navigatorTitle":[{"kind":"identifier","text":"SignalHandler"}],"symbolKind":"class","modules":[{"name":"SignalHandler"}],"roleHeading":"Class","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"SignalHandler"}],"title":"SignalHandler","role":"symbol","externalID":"s:13SignalHandlerAAC"},"kind":"symbol","topicSections":[{"identifiers":["doc:\/\/SignalHandler\/documentation\/SignalHandler\/SignalHandler\/init(signals:handler:)-2p7ww","doc:\/\/SignalHandler\/documentation\/SignalHandler\/SignalHandler\/init(signals:handler:)-2t65u"],"title":"Initializers"},{"identifiers":["doc:\/\/SignalHandler\/documentation\/SignalHandler\/SignalHandler\/handler","doc:\/\/SignalHandler\/documentation\/SignalHandler\/SignalHandler\/signals"],"title":"Instance Properties"},{"identifiers":["doc:\/\/SignalHandler\/documentation\/SignalHandler\/SignalHandler\/start()"],"title":"Instance Methods"},{"identifiers":["doc:\/\/SignalHandler\/documentation\/SignalHandler\/SignalHandler\/default"],"title":"Type Properties"},{"identifiers":["doc:\/\/SignalHandler\/documentation\/SignalHandler\/SignalHandler\/start(with:completion:)","doc:\/\/SignalHandler\/documentation\/SignalHandler\/SignalHandler\/start(with:handler:)"],"title":"Type Methods"},{"identifiers":["doc:\/\/SignalHandler\/documentation\/SignalHandler\/SignalHandler\/Equatable-Implementations"],"generated":true,"title":"Default Implementations"}],"sections":[],"abstract":[{"type":"text","text":"Handler for most handleable *nix signals"}],"hierarchy":{"paths":[["doc:\/\/SignalHandler\/documentation\/SignalHandler"]]},"primaryContentSections":[{"declarations":[{"tokens":[{"text":"actor","kind":"keyword"},{"text":" ","kind":"text"},{"text":"SignalHandler","kind":"identifier"}],"platforms":["Linux"],"languages":["swift"]}],"kind":"declarations"},{"content":[{"type":"heading","text":"Overview","anchor":"overview","level":2},{"inlineContent":[{"type":"text","text":"It catches the signal asynchronously on the fly while executing the callback supplied to it."},{"type":"text","text":" "},{"type":"text","text":"It provides a way to clean up and exit if a signal registered is being caught"}],"type":"paragraph"},{"inlineContent":[{"text":"It should always be the first code and its encouraged to run in parallel with ","type":"text"},{"code":"async let","type":"codeVoice"},{"text":" syntax in order to enable it catch signals as soon as your code start executing","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Always remember to call "},{"identifier":"doc:\/\/SignalHandler\/documentation\/SignalHandler\/SignalHandler\/start()","type":"reference","isActive":true},{"type":"text","text":" otherwise the registered signals wonâ€™t be caught"}],"type":"paragraph"},{"inlineContent":[{"text":"Example of its usage","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["    let exitHandler = SignalHandler(signals: .SIGINT, .SIQUIT) { _ in","        print(\"Closing this program\")","        \/\/ Code to clean up resources used","    }","    async let _ = exitHandler.start()"]},{"inlineContent":[{"type":"text","text":"Or"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["    Task {","        let exithandler = SignalHandler(signals: .SIGINT, .SIQUIT) { _ in","            print(\"Closing this program\")","            \/\/ Code to clean up resources used","        }","        await exithandler.start()","    }"]}],"kind":"content"}],"relationshipsSections":[{"identifiers":["doc:\/\/SignalHandler\/SQ","doc:\/\/SignalHandler\/s8SendableP","doc:\/\/SignalHandler\/ScA","doc:\/\/SignalHandler\/12_Concurrency8AnyActorP"],"type":"conformsTo","title":"Conforms To","kind":"relationships"}],"references":{"doc://SignalHandler/ScA":{"identifier":"doc:\/\/SignalHandler\/ScA","title":"_Concurrency.Actor","type":"unresolvable"},"doc://SignalHandler/documentation/SignalHandler/SignalHandler/signals":{"type":"topic","url":"\/documentation\/signalhandler\/signalhandler\/signals","role":"symbol","identifier":"doc:\/\/SignalHandler\/documentation\/SignalHandler\/SignalHandler\/signals","title":"signals","fragments":[{"kind":"keyword","text":"let"},{"kind":"text","text":" "},{"kind":"identifier","text":"signals"},{"kind":"text","text":": ["},{"kind":"typeIdentifier","text":"Signals","preciseIdentifier":"s:13SignalHandler7SignalsO"},{"kind":"text","text":"]"}],"kind":"symbol","abstract":[{"type":"text","text":"Signals registered to be handled"}]},"doc://SignalHandler/documentation/SignalHandler/SignalHandler/start(with:completion:)":{"type":"topic","url":"\/documentation\/signalhandler\/signalhandler\/start(with:completion:)","role":"symbol","identifier":"doc:\/\/SignalHandler\/documentation\/SignalHandler\/SignalHandler\/start(with:completion:)","title":"start(with:completion:)","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"start","kind":"identifier"},{"text":"(","kind":"text"},{"text":"with","kind":"externalParam"},{"text":": [","kind":"text"},{"text":"Signals","preciseIdentifier":"s:13SignalHandler7SignalsO","kind":"typeIdentifier"},{"text":"], ","kind":"text"},{"text":"completion","kind":"externalParam"},{"text":": ((","kind":"text"},{"preciseIdentifier":"s:s5Int32V","text":"Int32","kind":"typeIdentifier"},{"text":") -> ())) ","kind":"text"},{"text":"async","kind":"keyword"}],"kind":"symbol","abstract":[{"text":"Start handling signals","type":"text"}]},"doc://SignalHandler/s8SendableP":{"identifier":"doc:\/\/SignalHandler\/s8SendableP","title":"Swift.Sendable","type":"unresolvable"},"doc://SignalHandler/documentation/SignalHandler/SignalHandler/Equatable-Implementations":{"abstract":[],"url":"\/documentation\/signalhandler\/signalhandler\/equatable-implementations","type":"topic","role":"collectionGroup","identifier":"doc:\/\/SignalHandler\/documentation\/SignalHandler\/SignalHandler\/Equatable-Implementations","title":"Equatable Implementations","kind":"article"},"doc://SignalHandler/documentation/SignalHandler/SignalHandler/start()":{"type":"topic","url":"\/documentation\/signalhandler\/signalhandler\/start()","role":"symbol","identifier":"doc:\/\/SignalHandler\/documentation\/SignalHandler\/SignalHandler\/start()","title":"start()","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"start","kind":"identifier"},{"text":"() ","kind":"text"},{"text":"async","kind":"keyword"}],"kind":"symbol","abstract":[{"text":"Starts handling ","type":"text"},{"identifier":"doc:\/\/SignalHandler\/documentation\/SignalHandler\/SignalHandler\/signals","type":"reference","isActive":true},{"text":" registered asynchronously as they being caught","type":"text"}]},"doc://SignalHandler/documentation/SignalHandler":{"identifier":"doc:\/\/SignalHandler\/documentation\/SignalHandler","type":"topic","url":"\/documentation\/signalhandler","kind":"symbol","title":"SignalHandler","role":"collection","abstract":[]},"doc://SignalHandler/SQ":{"identifier":"doc:\/\/SignalHandler\/SQ","title":"Swift.Equatable","type":"unresolvable"},"doc://SignalHandler/documentation/SignalHandler/SignalHandler/default":{"fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"let","kind":"keyword"},{"text":" ","kind":"text"},{"text":"`default`","kind":"identifier"},{"text":": ","kind":"text"},{"text":"SignalHandler","preciseIdentifier":"s:13SignalHandlerAAC","kind":"typeIdentifier"}],"title":"default","abstract":[{"text":"A simple singleton for the ","type":"text"},{"type":"reference","identifier":"doc:\/\/SignalHandler\/documentation\/SignalHandler","isActive":true},{"text":" type","type":"text"}],"kind":"symbol","identifier":"doc:\/\/SignalHandler\/documentation\/SignalHandler\/SignalHandler\/default","url":"\/documentation\/signalhandler\/signalhandler\/default","type":"topic","role":"symbol"},"doc://SignalHandler/documentation/SignalHandler/SignalHandler/start(with:handler:)":{"fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"start"},{"text":"(","kind":"text"},{"text":"with","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Signals","preciseIdentifier":"s:13SignalHandler7SignalsO","kind":"typeIdentifier"},{"text":"..., ","kind":"text"},{"text":"handler","kind":"externalParam"},{"text":": ((","kind":"text"},{"preciseIdentifier":"s:s5Int32V","text":"Int32","kind":"typeIdentifier"},{"text":") -> ())) ","kind":"text"},{"text":"async","kind":"keyword"}],"title":"start(with:handler:)","url":"\/documentation\/signalhandler\/signalhandler\/start(with:handler:)","kind":"symbol","type":"topic","identifier":"doc:\/\/SignalHandler\/documentation\/SignalHandler\/SignalHandler\/start(with:handler:)","role":"symbol","abstract":[{"text":"Start handling signals","type":"text"}]},"doc://SignalHandler/documentation/SignalHandler/SignalHandler/handler":{"url":"\/documentation\/signalhandler\/signalhandler\/handler","kind":"symbol","role":"symbol","type":"topic","abstract":[{"text":"Callback to run if any registered signal is caught","type":"text"}],"title":"handler","identifier":"doc:\/\/SignalHandler\/documentation\/SignalHandler\/SignalHandler\/handler","fragments":[{"kind":"keyword","text":"let"},{"kind":"text","text":" "},{"kind":"identifier","text":"handler"},{"kind":"text","text":": (("},{"preciseIdentifier":"s:s5Int32V","kind":"typeIdentifier","text":"Int32"},{"kind":"text","text":") -> ())"}]},"doc://SignalHandler/documentation/SignalHandler/SignalHandler/init(signals:handler:)-2t65u":{"role":"symbol","abstract":[{"text":"Instantiates this type","type":"text"}],"title":"init(signals:handler:)","fragments":[{"text":"init","kind":"identifier"},{"text":"(","kind":"text"},{"text":"signals","kind":"externalParam"},{"kind":"text","text":": ["},{"kind":"typeIdentifier","text":"Signals","preciseIdentifier":"s:13SignalHandler7SignalsO"},{"kind":"text","text":"], "},{"kind":"externalParam","text":"handler"},{"text":": ((","kind":"text"},{"text":"Int32","preciseIdentifier":"s:s5Int32V","kind":"typeIdentifier"},{"text":") -> ()))","kind":"text"}],"kind":"symbol","url":"\/documentation\/signalhandler\/signalhandler\/init(signals:handler:)-2t65u","type":"topic","identifier":"doc:\/\/SignalHandler\/documentation\/SignalHandler\/SignalHandler\/init(signals:handler:)-2t65u"},"doc://SignalHandler/documentation/SignalHandler/SignalHandler/init(signals:handler:)-2p7ww":{"role":"symbol","title":"init(signals:handler:)","identifier":"doc:\/\/SignalHandler\/documentation\/SignalHandler\/SignalHandler\/init(signals:handler:)-2p7ww","type":"topic","kind":"symbol","abstract":[{"text":"Instantiates this type","type":"text"}],"fragments":[{"text":"init","kind":"identifier"},{"text":"(","kind":"text"},{"text":"signals","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Signals","preciseIdentifier":"s:13SignalHandler7SignalsO","kind":"typeIdentifier"},{"text":"..., ","kind":"text"},{"text":"handler","kind":"externalParam"},{"text":": ((","kind":"text"},{"text":"Int32","preciseIdentifier":"s:s5Int32V","kind":"typeIdentifier"},{"text":") -> ()))","kind":"text"}],"url":"\/documentation\/signalhandler\/signalhandler\/init(signals:handler:)-2p7ww"},"doc://SignalHandler/documentation/SignalHandler/SignalHandler":{"navigatorTitle":[{"kind":"identifier","text":"SignalHandler"}],"identifier":"doc:\/\/SignalHandler\/documentation\/SignalHandler\/SignalHandler","type":"topic","url":"\/documentation\/signalhandler\/signalhandler","kind":"symbol","title":"SignalHandler","role":"symbol","abstract":[{"type":"text","text":"Handler for most handleable *nix signals"}],"fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"SignalHandler"}]},"doc://SignalHandler/12_Concurrency8AnyActorP":{"identifier":"doc:\/\/SignalHandler\/12_Concurrency8AnyActorP","title":"_Concurrency.AnyActor","type":"unresolvable"}}}