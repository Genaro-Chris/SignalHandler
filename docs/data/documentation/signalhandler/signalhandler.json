{"metadata":{"modules":[{"name":"SignalHandler"}],"roleHeading":"Class","externalID":"s:13SignalHandlerAAC","navigatorTitle":[{"kind":"identifier","text":"SignalHandler"}],"symbolKind":"class","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"SignalHandler"}],"role":"symbol","title":"SignalHandler"},"kind":"symbol","hierarchy":{"paths":[["doc:\/\/SignalHandler\/documentation\/SignalHandler"]]},"relationshipsSections":[{"kind":"relationships","title":"Conforms To","type":"conformsTo","identifiers":["doc:\/\/SignalHandler\/SQ","doc:\/\/SignalHandler\/s8SendableP","doc:\/\/SignalHandler\/ScA","doc:\/\/SignalHandler\/12_Concurrency8AnyActorP"]}],"schemaVersion":{"patch":0,"minor":3,"major":0},"sections":[],"primaryContentSections":[{"declarations":[{"tokens":[{"text":"actor","kind":"keyword"},{"text":" ","kind":"text"},{"text":"SignalHandler","kind":"identifier"}],"languages":["swift"],"platforms":["Linux"]}],"kind":"declarations"},{"content":[{"text":"Overview","anchor":"overview","level":2,"type":"heading"},{"inlineContent":[{"text":"It catches the signal asynchronously on the fly while executing the callback supplied to it.","type":"text"},{"text":" ","type":"text"},{"text":"It provides a way to clean up and exit if a signal registered is being caught","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"It should always be the first code and its encouraged to run in parallel with ","type":"text"},{"code":"async let","type":"codeVoice"},{"text":" syntax in order to enable it catch signals as soon as your code start executing","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Always remember to call "},{"identifier":"doc:\/\/SignalHandler\/documentation\/SignalHandler\/SignalHandler\/start()","type":"reference","isActive":true},{"type":"text","text":" otherwise the registered signals wonâ€™t be caught"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Example of its usage"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["    let exitHandler = SignalHandler(signals: .SIGINT, .SIQUIT) { _ in","        print(\"Closing this program\")","        \/\/ Code to clean up resources used","    }","    async let _ = exitHandler.start()"]},{"inlineContent":[{"type":"text","text":"Or"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["    Task {","        let exithandler = SignalHandler(signals: .SIGINT, .SIQUIT) { _ in","            print(\"Closing this program\")","            \/\/ Code to clean up resources used","        }","        await exithandler.start()","    }"]}],"kind":"content"}],"identifier":{"url":"doc:\/\/SignalHandler\/documentation\/SignalHandler\/SignalHandler","interfaceLanguage":"swift"},"abstract":[{"text":"Handler for most handleable *nix signals","type":"text"}],"topicSections":[{"title":"Initializers","identifiers":["doc:\/\/SignalHandler\/documentation\/SignalHandler\/SignalHandler\/init(signals:handler:)-2p7ww","doc:\/\/SignalHandler\/documentation\/SignalHandler\/SignalHandler\/init(signals:handler:)-2t65u"]},{"title":"Instance Properties","identifiers":["doc:\/\/SignalHandler\/documentation\/SignalHandler\/SignalHandler\/handler","doc:\/\/SignalHandler\/documentation\/SignalHandler\/SignalHandler\/signals"]},{"title":"Instance Methods","identifiers":["doc:\/\/SignalHandler\/documentation\/SignalHandler\/SignalHandler\/start()"]},{"title":"Type Properties","identifiers":["doc:\/\/SignalHandler\/documentation\/SignalHandler\/SignalHandler\/default"]},{"title":"Type Methods","identifiers":["doc:\/\/SignalHandler\/documentation\/SignalHandler\/SignalHandler\/start(with:completion:)","doc:\/\/SignalHandler\/documentation\/SignalHandler\/SignalHandler\/start(with:handler:)"]},{"generated":true,"title":"Default Implementations","identifiers":["doc:\/\/SignalHandler\/documentation\/SignalHandler\/SignalHandler\/Equatable-Implementations"]}],"variants":[{"paths":["\/documentation\/signalhandler\/signalhandler"],"traits":[{"interfaceLanguage":"swift"}]}],"references":{"doc://SignalHandler/documentation/SignalHandler/SignalHandler/init(signals:handler:)-2t65u":{"role":"symbol","kind":"symbol","identifier":"doc:\/\/SignalHandler\/documentation\/SignalHandler\/SignalHandler\/init(signals:handler:)-2t65u","abstract":[{"type":"text","text":"Instantiates this type"}],"type":"topic","title":"init(signals:handler:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"signals"},{"kind":"text","text":": ["},{"kind":"typeIdentifier","text":"Signals","preciseIdentifier":"s:13SignalHandler7SignalsO"},{"kind":"text","text":"], "},{"text":"handler","kind":"externalParam"},{"text":": ((","kind":"text"},{"preciseIdentifier":"s:s5Int32V","text":"Int32","kind":"typeIdentifier"},{"text":") -> ()))","kind":"text"}],"url":"\/documentation\/signalhandler\/signalhandler\/init(signals:handler:)-2t65u"},"doc://SignalHandler/documentation/SignalHandler/SignalHandler/start(with:handler:)":{"fragments":[{"text":"static","kind":"keyword"},{"kind":"text","text":" "},{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"start"},{"kind":"text","text":"("},{"kind":"externalParam","text":"with"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:13SignalHandler7SignalsO","text":"Signals","kind":"typeIdentifier"},{"text":"..., ","kind":"text"},{"text":"handler","kind":"externalParam"},{"text":": ((","kind":"text"},{"preciseIdentifier":"s:s5Int32V","text":"Int32","kind":"typeIdentifier"},{"text":") -> ())) ","kind":"text"},{"text":"async","kind":"keyword"}],"identifier":"doc:\/\/SignalHandler\/documentation\/SignalHandler\/SignalHandler\/start(with:handler:)","url":"\/documentation\/signalhandler\/signalhandler\/start(with:handler:)","title":"start(with:handler:)","abstract":[{"text":"Start handling signals","type":"text"}],"role":"symbol","kind":"symbol","type":"topic"},"doc://SignalHandler/documentation/SignalHandler/SignalHandler/start(with:completion:)":{"type":"topic","abstract":[{"text":"Start handling signals","type":"text"}],"identifier":"doc:\/\/SignalHandler\/documentation\/SignalHandler\/SignalHandler\/start(with:completion:)","role":"symbol","fragments":[{"text":"static","kind":"keyword"},{"kind":"text","text":" "},{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"start"},{"kind":"text","text":"("},{"kind":"externalParam","text":"with"},{"text":": [","kind":"text"},{"preciseIdentifier":"s:13SignalHandler7SignalsO","text":"Signals","kind":"typeIdentifier"},{"text":"], ","kind":"text"},{"text":"completion","kind":"externalParam"},{"text":": ((","kind":"text"},{"preciseIdentifier":"s:s5Int32V","text":"Int32","kind":"typeIdentifier"},{"text":") -> ())) ","kind":"text"},{"text":"async","kind":"keyword"}],"title":"start(with:completion:)","kind":"symbol","url":"\/documentation\/signalhandler\/signalhandler\/start(with:completion:)"},"doc://SignalHandler/documentation/SignalHandler/SignalHandler/signals":{"fragments":[{"text":"let","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"signals"},{"kind":"text","text":": ["},{"kind":"typeIdentifier","text":"Signals","preciseIdentifier":"s:13SignalHandler7SignalsO"},{"kind":"text","text":"]"}],"kind":"symbol","role":"symbol","url":"\/documentation\/signalhandler\/signalhandler\/signals","type":"topic","identifier":"doc:\/\/SignalHandler\/documentation\/SignalHandler\/SignalHandler\/signals","abstract":[{"type":"text","text":"Signals registered to be handled"}],"title":"signals"},"doc://SignalHandler/documentation/SignalHandler/SignalHandler/start()":{"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"start"},{"kind":"text","text":"() "},{"kind":"keyword","text":"async"}],"kind":"symbol","role":"symbol","url":"\/documentation\/signalhandler\/signalhandler\/start()","type":"topic","identifier":"doc:\/\/SignalHandler\/documentation\/SignalHandler\/SignalHandler\/start()","abstract":[{"text":"Starts handling ","type":"text"},{"isActive":true,"identifier":"doc:\/\/SignalHandler\/documentation\/SignalHandler\/SignalHandler\/signals","type":"reference"},{"text":" registered asynchronously as they being caught","type":"text"}],"title":"start()"},"doc://SignalHandler/documentation/SignalHandler/SignalHandler/handler":{"type":"topic","abstract":[{"text":"Callback to run if any registered signal is caught","type":"text"}],"identifier":"doc:\/\/SignalHandler\/documentation\/SignalHandler\/SignalHandler\/handler","role":"symbol","fragments":[{"kind":"keyword","text":"let"},{"text":" ","kind":"text"},{"kind":"identifier","text":"handler"},{"kind":"text","text":": (("},{"kind":"typeIdentifier","preciseIdentifier":"s:s5Int32V","text":"Int32"},{"kind":"text","text":") -> ())"}],"title":"handler","kind":"symbol","url":"\/documentation\/signalhandler\/signalhandler\/handler"},"doc://SignalHandler/documentation/SignalHandler/SignalHandler/default":{"fragments":[{"text":"static","kind":"keyword"},{"kind":"text","text":" "},{"kind":"keyword","text":"let"},{"kind":"text","text":" "},{"kind":"identifier","text":"`default`"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:13SignalHandlerAAC","text":"SignalHandler","kind":"typeIdentifier"}],"identifier":"doc:\/\/SignalHandler\/documentation\/SignalHandler\/SignalHandler\/default","url":"\/documentation\/signalhandler\/signalhandler\/default","title":"default","abstract":[{"text":"A simple singleton for the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/SignalHandler\/documentation\/SignalHandler"},{"type":"text","text":" type"}],"role":"symbol","kind":"symbol","type":"topic"},"doc://SignalHandler/s8SendableP":{"type":"unresolvable","identifier":"doc:\/\/SignalHandler\/s8SendableP","title":"Swift.Sendable"},"doc://SignalHandler/documentation/SignalHandler":{"abstract":[],"identifier":"doc:\/\/SignalHandler\/documentation\/SignalHandler","url":"\/documentation\/signalhandler","kind":"symbol","title":"SignalHandler","type":"topic","role":"collection"},"doc://SignalHandler/12_Concurrency8AnyActorP":{"type":"unresolvable","title":"_Concurrency.AnyActor","identifier":"doc:\/\/SignalHandler\/12_Concurrency8AnyActorP"},"doc://SignalHandler/documentation/SignalHandler/SignalHandler/Equatable-Implementations":{"kind":"article","url":"\/documentation\/signalhandler\/signalhandler\/equatable-implementations","identifier":"doc:\/\/SignalHandler\/documentation\/SignalHandler\/SignalHandler\/Equatable-Implementations","type":"topic","role":"collectionGroup","title":"Equatable Implementations","abstract":[]},"doc://SignalHandler/SQ":{"identifier":"doc:\/\/SignalHandler\/SQ","title":"Swift.Equatable","type":"unresolvable"},"doc://SignalHandler/documentation/SignalHandler/SignalHandler/init(signals:handler:)-2p7ww":{"abstract":[{"type":"text","text":"Instantiates this type"}],"identifier":"doc:\/\/SignalHandler\/documentation\/SignalHandler\/SignalHandler\/init(signals:handler:)-2p7ww","url":"\/documentation\/signalhandler\/signalhandler\/init(signals:handler:)-2p7ww","kind":"symbol","title":"init(signals:handler:)","type":"topic","role":"symbol","fragments":[{"kind":"identifier","text":"init"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"signals"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:13SignalHandler7SignalsO","text":"Signals","kind":"typeIdentifier"},{"text":"..., ","kind":"text"},{"text":"handler","kind":"externalParam"},{"text":": ((","kind":"text"},{"preciseIdentifier":"s:s5Int32V","text":"Int32","kind":"typeIdentifier"},{"text":") -> ()))","kind":"text"}]},"doc://SignalHandler/documentation/SignalHandler/SignalHandler":{"role":"symbol","navigatorTitle":[{"text":"SignalHandler","kind":"identifier"}],"kind":"symbol","identifier":"doc:\/\/SignalHandler\/documentation\/SignalHandler\/SignalHandler","abstract":[{"type":"text","text":"Handler for most handleable *nix signals"}],"type":"topic","title":"SignalHandler","fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"kind":"identifier","text":"SignalHandler"}],"url":"\/documentation\/signalhandler\/signalhandler"},"doc://SignalHandler/ScA":{"identifier":"doc:\/\/SignalHandler\/ScA","title":"_Concurrency.Actor","type":"unresolvable"}}}