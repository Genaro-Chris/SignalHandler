{"schemaVersion":{"minor":3,"patch":0,"major":0},"identifier":{"url":"doc:\/\/SignalHandler\/documentation\/SignalHandler\/SignalHandler","interfaceLanguage":"swift"},"kind":"symbol","metadata":{"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"SignalHandler","kind":"identifier"}],"roleHeading":"Class","role":"symbol","title":"SignalHandler","externalID":"s:13SignalHandlerAAC","symbolKind":"class","modules":[{"name":"SignalHandler"}],"navigatorTitle":[{"text":"SignalHandler","kind":"identifier"}]},"sections":[],"primaryContentSections":[{"declarations":[{"languages":["swift"],"tokens":[{"text":"actor","kind":"keyword"},{"text":" ","kind":"text"},{"text":"SignalHandler","kind":"identifier"}],"platforms":["Linux"]}],"kind":"declarations"},{"content":[{"text":"Overview","level":2,"type":"heading","anchor":"overview"},{"inlineContent":[{"text":"It catches the signal asynchronously on the fly while executing the callback supplied to it.","type":"text"},{"text":" ","type":"text"},{"text":"It provides a way to clean up and exit if a signal registered is being caught","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"It should always be the first code and its encouraged to run in parallel with "},{"type":"codeVoice","code":"async let"},{"type":"text","text":" syntax in order to enable it catch signals as soon as your code start executing"}],"type":"paragraph"},{"inlineContent":[{"text":"Always remember to call ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/SignalHandler\/documentation\/SignalHandler\/SignalHandler\/start()"},{"text":" otherwise the registered signals wonâ€™t be caught","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"Example of its usage","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["    let exitHandler = SignalHandler(signals: .SIGINT, .SIQUIT) { _ in","        print(\"Closing this program\")","        \/\/ Code to clean up resources used","    }","    async let _ = exitHandler.start()"]},{"inlineContent":[{"type":"text","text":"Or"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["    Task {","        let exithandler = SignalHandler(signals: .SIGINT, .SIQUIT) { _ in","            print(\"Closing this program\")","            \/\/ Code to clean up resources used","        }","        await exithandler.start()","    }"]}],"kind":"content"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/signalhandler\/signalhandler"]}],"abstract":[{"type":"text","text":"Handler for most handleable *nix signals"}],"topicSections":[{"title":"Initializers","identifiers":["doc:\/\/SignalHandler\/documentation\/SignalHandler\/SignalHandler\/init(signals:handler:)-2p7ww","doc:\/\/SignalHandler\/documentation\/SignalHandler\/SignalHandler\/init(signals:handler:)-2t65u"]},{"title":"Instance Properties","identifiers":["doc:\/\/SignalHandler\/documentation\/SignalHandler\/SignalHandler\/handler","doc:\/\/SignalHandler\/documentation\/SignalHandler\/SignalHandler\/signals"]},{"title":"Instance Methods","identifiers":["doc:\/\/SignalHandler\/documentation\/SignalHandler\/SignalHandler\/start()"]},{"title":"Type Properties","identifiers":["doc:\/\/SignalHandler\/documentation\/SignalHandler\/SignalHandler\/default"]},{"title":"Type Methods","identifiers":["doc:\/\/SignalHandler\/documentation\/SignalHandler\/SignalHandler\/start(with:completion:)","doc:\/\/SignalHandler\/documentation\/SignalHandler\/SignalHandler\/start(with:handler:)"]},{"title":"Default Implementations","generated":true,"identifiers":["doc:\/\/SignalHandler\/documentation\/SignalHandler\/SignalHandler\/Equatable-Implementations"]}],"hierarchy":{"paths":[["doc:\/\/SignalHandler\/documentation\/SignalHandler"]]},"relationshipsSections":[{"type":"conformsTo","title":"Conforms To","identifiers":["doc:\/\/SignalHandler\/SQ","doc:\/\/SignalHandler\/s8SendableP","doc:\/\/SignalHandler\/ScA","doc:\/\/SignalHandler\/12_Concurrency8AnyActorP"],"kind":"relationships"}],"references":{"doc://SignalHandler/documentation/SignalHandler/SignalHandler/init(signals:handler:)-2t65u":{"title":"init(signals:handler:)","url":"\/documentation\/signalhandler\/signalhandler\/init(signals:handler:)-2t65u","identifier":"doc:\/\/SignalHandler\/documentation\/SignalHandler\/SignalHandler\/init(signals:handler:)-2t65u","fragments":[{"text":"init","kind":"identifier"},{"text":"(","kind":"text"},{"text":"signals","kind":"externalParam"},{"text":": [","kind":"text"},{"text":"Signals","preciseIdentifier":"s:13SignalHandler7SignalsO","kind":"typeIdentifier"},{"text":"], ","kind":"text"},{"text":"handler","kind":"externalParam"},{"text":": ((","kind":"text"},{"text":"Int32","preciseIdentifier":"s:s5Int32V","kind":"typeIdentifier"},{"text":") -> ()))","kind":"text"}],"abstract":[{"text":"Instantiates this type","type":"text"}],"role":"symbol","kind":"symbol","type":"topic"},"doc://SignalHandler/SQ":{"identifier":"doc:\/\/SignalHandler\/SQ","type":"unresolvable","title":"Swift.Equatable"},"doc://SignalHandler/documentation/SignalHandler/SignalHandler/default":{"type":"topic","role":"symbol","kind":"symbol","identifier":"doc:\/\/SignalHandler\/documentation\/SignalHandler\/SignalHandler\/default","title":"default","url":"\/documentation\/signalhandler\/signalhandler\/default","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"let","kind":"keyword"},{"text":" ","kind":"text"},{"text":"`default`","kind":"identifier"},{"text":": ","kind":"text"},{"text":"SignalHandler","preciseIdentifier":"s:13SignalHandlerAAC","kind":"typeIdentifier"}],"abstract":[{"type":"text","text":"A simple singleton for the "},{"identifier":"doc:\/\/SignalHandler\/documentation\/SignalHandler","type":"reference","isActive":true},{"text":" type","type":"text"}]},"doc://SignalHandler/documentation/SignalHandler/SignalHandler/Equatable-Implementations":{"type":"topic","kind":"article","url":"\/documentation\/signalhandler\/signalhandler\/equatable-implementations","identifier":"doc:\/\/SignalHandler\/documentation\/SignalHandler\/SignalHandler\/Equatable-Implementations","title":"Equatable Implementations","abstract":[],"role":"collectionGroup"},"doc://SignalHandler/12_Concurrency8AnyActorP":{"identifier":"doc:\/\/SignalHandler\/12_Concurrency8AnyActorP","type":"unresolvable","title":"_Concurrency.AnyActor"},"doc://SignalHandler/documentation/SignalHandler":{"abstract":[],"title":"SignalHandler","kind":"symbol","type":"topic","url":"\/documentation\/signalhandler","identifier":"doc:\/\/SignalHandler\/documentation\/SignalHandler","role":"collection"},"doc://SignalHandler/documentation/SignalHandler/SignalHandler/handler":{"type":"topic","kind":"symbol","fragments":[{"text":"let","kind":"keyword"},{"text":" ","kind":"text"},{"text":"handler","kind":"identifier"},{"text":": ((","kind":"text"},{"text":"Int32","kind":"typeIdentifier","preciseIdentifier":"s:s5Int32V"},{"text":") -> ())","kind":"text"}],"url":"\/documentation\/signalhandler\/signalhandler\/handler","identifier":"doc:\/\/SignalHandler\/documentation\/SignalHandler\/SignalHandler\/handler","title":"handler","abstract":[{"text":"Callback to run if any registered signal is caught","type":"text"}],"role":"symbol"},"doc://SignalHandler/documentation/SignalHandler/SignalHandler/start()":{"url":"\/documentation\/signalhandler\/signalhandler\/start()","identifier":"doc:\/\/SignalHandler\/documentation\/SignalHandler\/SignalHandler\/start()","kind":"symbol","role":"symbol","type":"topic","abstract":[{"text":"Starts handling ","type":"text"},{"identifier":"doc:\/\/SignalHandler\/documentation\/SignalHandler\/SignalHandler\/signals","isActive":true,"type":"reference"},{"text":" registered asynchronously as they being caught","type":"text"}],"title":"start()","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"start","kind":"identifier"},{"text":"() ","kind":"text"},{"text":"async","kind":"keyword"}]},"doc://SignalHandler/documentation/SignalHandler/SignalHandler":{"kind":"symbol","url":"\/documentation\/signalhandler\/signalhandler","navigatorTitle":[{"kind":"identifier","text":"SignalHandler"}],"type":"topic","abstract":[{"type":"text","text":"Handler for most handleable *nix signals"}],"identifier":"doc:\/\/SignalHandler\/documentation\/SignalHandler\/SignalHandler","title":"SignalHandler","role":"symbol","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"SignalHandler"}]},"doc://SignalHandler/documentation/SignalHandler/SignalHandler/init(signals:handler:)-2p7ww":{"kind":"symbol","url":"\/documentation\/signalhandler\/signalhandler\/init(signals:handler:)-2p7ww","role":"symbol","type":"topic","identifier":"doc:\/\/SignalHandler\/documentation\/SignalHandler\/SignalHandler\/init(signals:handler:)-2p7ww","title":"init(signals:handler:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"text":"signals","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Signals","preciseIdentifier":"s:13SignalHandler7SignalsO","kind":"typeIdentifier"},{"text":"..., ","kind":"text"},{"text":"handler","kind":"externalParam"},{"text":": ((","kind":"text"},{"text":"Int32","preciseIdentifier":"s:s5Int32V","kind":"typeIdentifier"},{"text":") -> ()))","kind":"text"}],"abstract":[{"type":"text","text":"Instantiates this type"}]},"doc://SignalHandler/s8SendableP":{"identifier":"doc:\/\/SignalHandler\/s8SendableP","type":"unresolvable","title":"Swift.Sendable"},"doc://SignalHandler/ScA":{"identifier":"doc:\/\/SignalHandler\/ScA","type":"unresolvable","title":"_Concurrency.Actor"},"doc://SignalHandler/documentation/SignalHandler/SignalHandler/start(with:completion:)":{"fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"start"},{"kind":"text","text":"("},{"kind":"externalParam","text":"with"},{"kind":"text","text":": ["},{"kind":"typeIdentifier","text":"Signals","preciseIdentifier":"s:13SignalHandler7SignalsO"},{"kind":"text","text":"], "},{"kind":"externalParam","text":"completion"},{"kind":"text","text":": (("},{"kind":"typeIdentifier","text":"Int32","preciseIdentifier":"s:s5Int32V"},{"kind":"text","text":") -> ())) "},{"kind":"keyword","text":"async"}],"identifier":"doc:\/\/SignalHandler\/documentation\/SignalHandler\/SignalHandler\/start(with:completion:)","url":"\/documentation\/signalhandler\/signalhandler\/start(with:completion:)","kind":"symbol","role":"symbol","type":"topic","title":"start(with:completion:)","abstract":[{"type":"text","text":"Start handling signals"}]},"doc://SignalHandler/documentation/SignalHandler/SignalHandler/signals":{"fragments":[{"kind":"keyword","text":"let"},{"kind":"text","text":" "},{"kind":"identifier","text":"signals"},{"kind":"text","text":": ["},{"kind":"typeIdentifier","text":"Signals","preciseIdentifier":"s:13SignalHandler7SignalsO"},{"kind":"text","text":"]"}],"identifier":"doc:\/\/SignalHandler\/documentation\/SignalHandler\/SignalHandler\/signals","url":"\/documentation\/signalhandler\/signalhandler\/signals","kind":"symbol","role":"symbol","type":"topic","title":"signals","abstract":[{"type":"text","text":"Signals registered to be handled"}]},"doc://SignalHandler/documentation/SignalHandler/SignalHandler/start(with:handler:)":{"fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"start"},{"kind":"text","text":"("},{"kind":"externalParam","text":"with"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Signals","preciseIdentifier":"s:13SignalHandler7SignalsO"},{"kind":"text","text":"..., "},{"kind":"externalParam","text":"handler"},{"kind":"text","text":": (("},{"kind":"typeIdentifier","text":"Int32","preciseIdentifier":"s:s5Int32V"},{"kind":"text","text":") -> ())) "},{"kind":"keyword","text":"async"}],"identifier":"doc:\/\/SignalHandler\/documentation\/SignalHandler\/SignalHandler\/start(with:handler:)","url":"\/documentation\/signalhandler\/signalhandler\/start(with:handler:)","kind":"symbol","role":"symbol","type":"topic","title":"start(with:handler:)","abstract":[{"type":"text","text":"Start handling signals"}]}}}