{"topicSections":[{"identifiers":["doc:\/\/SignalHandler\/documentation\/SignalHandler\/SignalHandler\/init(signals:handler:)-2p7ww","doc:\/\/SignalHandler\/documentation\/SignalHandler\/SignalHandler\/init(signals:handler:)-2t65u"],"title":"Initializers"},{"identifiers":["doc:\/\/SignalHandler\/documentation\/SignalHandler\/SignalHandler\/handler","doc:\/\/SignalHandler\/documentation\/SignalHandler\/SignalHandler\/signals"],"title":"Instance Properties"},{"identifiers":["doc:\/\/SignalHandler\/documentation\/SignalHandler\/SignalHandler\/start()"],"title":"Instance Methods"},{"identifiers":["doc:\/\/SignalHandler\/documentation\/SignalHandler\/SignalHandler\/default"],"title":"Type Properties"},{"identifiers":["doc:\/\/SignalHandler\/documentation\/SignalHandler\/SignalHandler\/start(with:completion:)","doc:\/\/SignalHandler\/documentation\/SignalHandler\/SignalHandler\/start(with:handler:)"],"title":"Type Methods"},{"identifiers":["doc:\/\/SignalHandler\/documentation\/SignalHandler\/SignalHandler\/Equatable-Implementations"],"generated":true,"title":"Default Implementations"}],"abstract":[{"type":"text","text":"Handler for most handleable *nix signals"}],"schemaVersion":{"minor":3,"major":0,"patch":0},"metadata":{"navigatorTitle":[{"kind":"identifier","text":"SignalHandler"}],"fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"SignalHandler"}],"role":"symbol","externalID":"s:13SignalHandlerAAC","title":"SignalHandler","modules":[{"name":"SignalHandler"}],"symbolKind":"class","roleHeading":"Class"},"kind":"symbol","identifier":{"interfaceLanguage":"swift","url":"doc:\/\/SignalHandler\/documentation\/SignalHandler\/SignalHandler"},"sections":[],"relationshipsSections":[{"kind":"relationships","identifiers":["doc:\/\/SignalHandler\/SQ","doc:\/\/SignalHandler\/s8SendableP","doc:\/\/SignalHandler\/ScA","doc:\/\/SignalHandler\/12_Concurrency8AnyActorP"],"type":"conformsTo","title":"Conforms To"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/signalhandler\/signalhandler"]}],"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"actor"},{"kind":"text","text":" "},{"kind":"identifier","text":"SignalHandler"}],"platforms":["Linux"],"languages":["swift"]}]},{"kind":"content","content":[{"anchor":"overview","type":"heading","level":2,"text":"Overview"},{"type":"paragraph","inlineContent":[{"text":"It catches the signal asynchronously on the fly while executing the callback supplied to it.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"It provides a way to clean up and exit if a signal registered is being caught"}]},{"type":"paragraph","inlineContent":[{"text":"It should always be the first code and its encouraged to run in parallel with ","type":"text"},{"code":"async let","type":"codeVoice"},{"text":" syntax in order to enable it catch signals as soon as your code start executing","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Always remember to call "},{"type":"reference","identifier":"doc:\/\/SignalHandler\/documentation\/SignalHandler\/SignalHandler\/start()","isActive":true},{"type":"text","text":" otherwise the registered signals wonâ€™t be caught"}]},{"type":"paragraph","inlineContent":[{"text":"Example of its usage","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["    let exitHandler = SignalHandler(signals: .SIGINT, .SIQUIT) { _ in","        print(\"Closing this program\")","        \/\/ Code to clean up resources used","    }","    async let _ = exitHandler.start()"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Or"}]},{"syntax":"swift","type":"codeListing","code":["    Task {","        let exithandler = SignalHandler(signals: .SIGINT, .SIQUIT) { _ in","            print(\"Closing this program\")","            \/\/ Code to clean up resources used","        }","        await exithandler.start()","    }"]}]}],"hierarchy":{"paths":[["doc:\/\/SignalHandler\/documentation\/SignalHandler"]]},"references":{"doc://SignalHandler/documentation/SignalHandler/SignalHandler/signals":{"identifier":"doc:\/\/SignalHandler\/documentation\/SignalHandler\/SignalHandler\/signals","kind":"symbol","url":"\/documentation\/signalhandler\/signalhandler\/signals","role":"symbol","fragments":[{"kind":"keyword","text":"let"},{"kind":"text","text":" "},{"kind":"identifier","text":"signals"},{"kind":"text","text":": ["},{"kind":"typeIdentifier","text":"Signals","preciseIdentifier":"s:13SignalHandler7SignalsO"},{"kind":"text","text":"]"}],"type":"topic","abstract":[{"text":"Signals registered to be handled","type":"text"}],"title":"signals"},"doc://SignalHandler/documentation/SignalHandler":{"kind":"symbol","url":"\/documentation\/signalhandler","identifier":"doc:\/\/SignalHandler\/documentation\/SignalHandler","abstract":[],"type":"topic","role":"collection","title":"SignalHandler"},"doc://SignalHandler/documentation/SignalHandler/SignalHandler/start(with:handler:)":{"type":"topic","role":"symbol","abstract":[{"text":"Start handling signals","type":"text"}],"identifier":"doc:\/\/SignalHandler\/documentation\/SignalHandler\/SignalHandler\/start(with:handler:)","url":"\/documentation\/signalhandler\/signalhandler\/start(with:handler:)","title":"start(with:handler:)","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"start","kind":"identifier"},{"text":"(","kind":"text"},{"text":"with","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Signals","kind":"typeIdentifier","preciseIdentifier":"s:13SignalHandler7SignalsO"},{"text":"..., ","kind":"text"},{"text":"handler","kind":"externalParam"},{"text":": ((","kind":"text"},{"text":"Int32","kind":"typeIdentifier","preciseIdentifier":"s:s5Int32V"},{"text":") -> ())) ","kind":"text"},{"text":"async","kind":"keyword"}],"kind":"symbol"},"doc://SignalHandler/documentation/SignalHandler/SignalHandler/handler":{"title":"handler","abstract":[{"type":"text","text":"Callback to run if any registered signal is caught"}],"url":"\/documentation\/signalhandler\/signalhandler\/handler","kind":"symbol","identifier":"doc:\/\/SignalHandler\/documentation\/SignalHandler\/SignalHandler\/handler","role":"symbol","fragments":[{"kind":"keyword","text":"let"},{"kind":"text","text":" "},{"kind":"identifier","text":"handler"},{"text":": ((","kind":"text"},{"text":"Int32","preciseIdentifier":"s:s5Int32V","kind":"typeIdentifier"},{"text":") -> ())","kind":"text"}],"type":"topic"},"doc://SignalHandler/documentation/SignalHandler/SignalHandler/Equatable-Implementations":{"role":"collectionGroup","identifier":"doc:\/\/SignalHandler\/documentation\/SignalHandler\/SignalHandler\/Equatable-Implementations","type":"topic","kind":"article","url":"\/documentation\/signalhandler\/signalhandler\/equatable-implementations","title":"Equatable Implementations","abstract":[]},"doc://SignalHandler/SQ":{"title":"Swift.Equatable","identifier":"doc:\/\/SignalHandler\/SQ","type":"unresolvable"},"doc://SignalHandler/documentation/SignalHandler/SignalHandler":{"type":"topic","navigatorTitle":[{"text":"SignalHandler","kind":"identifier"}],"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"SignalHandler","kind":"identifier"}],"url":"\/documentation\/signalhandler\/signalhandler","identifier":"doc:\/\/SignalHandler\/documentation\/SignalHandler\/SignalHandler","kind":"symbol","title":"SignalHandler","role":"symbol","abstract":[{"text":"Handler for most handleable *nix signals","type":"text"}]},"doc://SignalHandler/documentation/SignalHandler/SignalHandler/init(signals:handler:)-2t65u":{"fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"text":"signals","kind":"externalParam"},{"text":": [","kind":"text"},{"text":"Signals","kind":"typeIdentifier","preciseIdentifier":"s:13SignalHandler7SignalsO"},{"text":"], ","kind":"text"},{"text":"handler","kind":"externalParam"},{"text":": ((","kind":"text"},{"kind":"typeIdentifier","text":"Int32","preciseIdentifier":"s:s5Int32V"},{"kind":"text","text":") -> ()))"}],"role":"symbol","identifier":"doc:\/\/SignalHandler\/documentation\/SignalHandler\/SignalHandler\/init(signals:handler:)-2t65u","type":"topic","kind":"symbol","url":"\/documentation\/signalhandler\/signalhandler\/init(signals:handler:)-2t65u","title":"init(signals:handler:)","abstract":[{"type":"text","text":"Instantiates this type"}]},"doc://SignalHandler/12_Concurrency8AnyActorP":{"title":"_Concurrency.AnyActor","identifier":"doc:\/\/SignalHandler\/12_Concurrency8AnyActorP","type":"unresolvable"},"doc://SignalHandler/ScA":{"title":"_Concurrency.Actor","identifier":"doc:\/\/SignalHandler\/ScA","type":"unresolvable"},"doc://SignalHandler/documentation/SignalHandler/SignalHandler/start()":{"type":"topic","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"start","kind":"identifier"},{"text":"() ","kind":"text"},{"text":"async","kind":"keyword"}],"url":"\/documentation\/signalhandler\/signalhandler\/start()","identifier":"doc:\/\/SignalHandler\/documentation\/SignalHandler\/SignalHandler\/start()","kind":"symbol","title":"start()","role":"symbol","abstract":[{"text":"Starts handling ","type":"text"},{"isActive":true,"identifier":"doc:\/\/SignalHandler\/documentation\/SignalHandler\/SignalHandler\/signals","type":"reference"},{"text":" registered asynchronously as they being caught","type":"text"}]},"doc://SignalHandler/s8SendableP":{"title":"Swift.Sendable","identifier":"doc:\/\/SignalHandler\/s8SendableP","type":"unresolvable"},"doc://SignalHandler/documentation/SignalHandler/SignalHandler/init(signals:handler:)-2p7ww":{"title":"init(signals:handler:)","abstract":[{"type":"text","text":"Instantiates this type"}],"url":"\/documentation\/signalhandler\/signalhandler\/init(signals:handler:)-2p7ww","kind":"symbol","identifier":"doc:\/\/SignalHandler\/documentation\/SignalHandler\/SignalHandler\/init(signals:handler:)-2p7ww","role":"symbol","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"signals"},{"text":": ","kind":"text"},{"text":"Signals","preciseIdentifier":"s:13SignalHandler7SignalsO","kind":"typeIdentifier"},{"text":"..., ","kind":"text"},{"text":"handler","kind":"externalParam"},{"text":": ((","kind":"text"},{"text":"Int32","preciseIdentifier":"s:s5Int32V","kind":"typeIdentifier"},{"text":") -> ()))","kind":"text"}],"type":"topic"},"doc://SignalHandler/documentation/SignalHandler/SignalHandler/default":{"url":"\/documentation\/signalhandler\/signalhandler\/default","role":"symbol","kind":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"let"},{"kind":"text","text":" "},{"kind":"identifier","text":"`default`"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"SignalHandler","preciseIdentifier":"s:13SignalHandlerAAC"}],"identifier":"doc:\/\/SignalHandler\/documentation\/SignalHandler\/SignalHandler\/default","title":"default","abstract":[{"text":"A simple singleton for the ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/SignalHandler\/documentation\/SignalHandler"},{"text":" type","type":"text"}]},"doc://SignalHandler/documentation/SignalHandler/SignalHandler/start(with:completion:)":{"fragments":[{"text":"static","kind":"keyword"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"start"},{"kind":"text","text":"("},{"kind":"externalParam","text":"with"},{"kind":"text","text":": ["},{"preciseIdentifier":"s:13SignalHandler7SignalsO","kind":"typeIdentifier","text":"Signals"},{"kind":"text","text":"], "},{"kind":"externalParam","text":"completion"},{"kind":"text","text":": (("},{"preciseIdentifier":"s:s5Int32V","kind":"typeIdentifier","text":"Int32"},{"kind":"text","text":") -> ())) "},{"kind":"keyword","text":"async"}],"role":"symbol","abstract":[{"text":"Start handling signals","type":"text"}],"url":"\/documentation\/signalhandler\/signalhandler\/start(with:completion:)","kind":"symbol","identifier":"doc:\/\/SignalHandler\/documentation\/SignalHandler\/SignalHandler\/start(with:completion:)","title":"start(with:completion:)","type":"topic"}}}