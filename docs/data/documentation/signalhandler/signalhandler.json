{"variants":[{"paths":["\/documentation\/signalhandler\/signalhandler"],"traits":[{"interfaceLanguage":"swift"}]}],"sections":[],"metadata":{"externalID":"s:13SignalHandlerAAC","modules":[{"name":"SignalHandler"}],"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"SignalHandler","kind":"identifier"}],"title":"SignalHandler","roleHeading":"Class","role":"symbol","navigatorTitle":[{"text":"SignalHandler","kind":"identifier"}],"symbolKind":"class"},"relationshipsSections":[{"kind":"relationships","identifiers":["doc:\/\/SignalHandler\/SQ","doc:\/\/SignalHandler\/s8SendableP","doc:\/\/SignalHandler\/ScA","doc:\/\/SignalHandler\/12_Concurrency8AnyActorP"],"type":"conformsTo","title":"Conforms To"}],"schemaVersion":{"minor":3,"patch":0,"major":0},"kind":"symbol","identifier":{"interfaceLanguage":"swift","url":"doc:\/\/SignalHandler\/documentation\/SignalHandler\/SignalHandler"},"abstract":[{"type":"text","text":"Handler for most handleable *nix signals"}],"topicSections":[{"identifiers":["doc:\/\/SignalHandler\/documentation\/SignalHandler\/SignalHandler\/init(signals:handler:)-2p7ww","doc:\/\/SignalHandler\/documentation\/SignalHandler\/SignalHandler\/init(signals:handler:)-2t65u"],"title":"Initializers"},{"identifiers":["doc:\/\/SignalHandler\/documentation\/SignalHandler\/SignalHandler\/handler","doc:\/\/SignalHandler\/documentation\/SignalHandler\/SignalHandler\/signals"],"title":"Instance Properties"},{"identifiers":["doc:\/\/SignalHandler\/documentation\/SignalHandler\/SignalHandler\/start()"],"title":"Instance Methods"},{"identifiers":["doc:\/\/SignalHandler\/documentation\/SignalHandler\/SignalHandler\/default"],"title":"Type Properties"},{"identifiers":["doc:\/\/SignalHandler\/documentation\/SignalHandler\/SignalHandler\/start(with:completion:)","doc:\/\/SignalHandler\/documentation\/SignalHandler\/SignalHandler\/start(with:handler:)"],"title":"Type Methods"},{"identifiers":["doc:\/\/SignalHandler\/documentation\/SignalHandler\/SignalHandler\/Equatable-Implementations"],"title":"Default Implementations","generated":true}],"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"text":"actor","kind":"keyword"},{"text":" ","kind":"text"},{"text":"SignalHandler","kind":"identifier"}],"languages":["swift"],"platforms":["Linux"]}]},{"content":[{"level":2,"anchor":"overview","type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"It catches the signal asynchronously on the fly while executing the callback supplied to it."},{"type":"text","text":" "},{"type":"text","text":"It provides a way to clean up and exit if a signal registered is being caught"}]},{"type":"paragraph","inlineContent":[{"text":"It should always be the first code and its encouraged to run in parallel with ","type":"text"},{"type":"codeVoice","code":"async let"},{"text":" syntax in order to enable it catch signals as soon as your code start executing","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Always remember to call "},{"type":"reference","identifier":"doc:\/\/SignalHandler\/documentation\/SignalHandler\/SignalHandler\/start()","isActive":true},{"type":"text","text":" otherwise the registered signals wonâ€™t be caught"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Example of its usage"}]},{"type":"codeListing","syntax":"swift","code":["    let exitHandler = SignalHandler(signals: .SIGINT, .SIQUIT) { _ in","        print(\"Closing this program\")","        \/\/ Code to clean up resources used","    }","    async let _ = exitHandler.start()"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Or"}]},{"type":"codeListing","syntax":"swift","code":["    Task {","        let exithandler = SignalHandler(signals: .SIGINT, .SIQUIT) { _ in","            print(\"Closing this program\")","            \/\/ Code to clean up resources used","        }","        await exithandler.start()","    }"]}],"kind":"content"}],"hierarchy":{"paths":[["doc:\/\/SignalHandler\/documentation\/SignalHandler"]]},"references":{"doc://SignalHandler/documentation/SignalHandler/SignalHandler/init(signals:handler:)-2p7ww":{"role":"symbol","kind":"symbol","fragments":[{"text":"init","kind":"identifier"},{"text":"(","kind":"text"},{"text":"signals","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Signals","kind":"typeIdentifier","preciseIdentifier":"s:13SignalHandler7SignalsO"},{"text":"..., ","kind":"text"},{"text":"handler","kind":"externalParam"},{"text":": ((","kind":"text"},{"text":"Int32","kind":"typeIdentifier","preciseIdentifier":"s:s5Int32V"},{"text":") -> ()))","kind":"text"}],"title":"init(signals:handler:)","type":"topic","abstract":[{"type":"text","text":"Instantiates this type"}],"url":"\/documentation\/signalhandler\/signalhandler\/init(signals:handler:)-2p7ww","identifier":"doc:\/\/SignalHandler\/documentation\/SignalHandler\/SignalHandler\/init(signals:handler:)-2p7ww"},"doc://SignalHandler/documentation/SignalHandler/SignalHandler/start()":{"abstract":[{"text":"Starts handling ","type":"text"},{"identifier":"doc:\/\/SignalHandler\/documentation\/SignalHandler\/SignalHandler\/signals","isActive":true,"type":"reference"},{"text":" registered asynchronously as they being caught","type":"text"}],"title":"start()","role":"symbol","url":"\/documentation\/signalhandler\/signalhandler\/start()","identifier":"doc:\/\/SignalHandler\/documentation\/SignalHandler\/SignalHandler\/start()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"start"},{"kind":"text","text":"() "},{"kind":"keyword","text":"async"}],"kind":"symbol","type":"topic"},"doc://SignalHandler/documentation/SignalHandler/SignalHandler/signals":{"abstract":[{"text":"Signals registered to be handled","type":"text"}],"title":"signals","role":"symbol","url":"\/documentation\/signalhandler\/signalhandler\/signals","identifier":"doc:\/\/SignalHandler\/documentation\/SignalHandler\/SignalHandler\/signals","fragments":[{"kind":"keyword","text":"let"},{"kind":"text","text":" "},{"kind":"identifier","text":"signals"},{"kind":"text","text":": ["},{"kind":"typeIdentifier","preciseIdentifier":"s:13SignalHandler7SignalsO","text":"Signals"},{"kind":"text","text":"]"}],"kind":"symbol","type":"topic"},"doc://SignalHandler/documentation/SignalHandler/SignalHandler":{"identifier":"doc:\/\/SignalHandler\/documentation\/SignalHandler\/SignalHandler","navigatorTitle":[{"kind":"identifier","text":"SignalHandler"}],"url":"\/documentation\/signalhandler\/signalhandler","kind":"symbol","type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"SignalHandler"}],"title":"SignalHandler","abstract":[{"type":"text","text":"Handler for most handleable *nix signals"}]},"doc://SignalHandler/documentation/SignalHandler/SignalHandler/default":{"role":"symbol","kind":"symbol","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"let","kind":"keyword"},{"text":" ","kind":"text"},{"text":"`default`","kind":"identifier"},{"text":": ","kind":"text"},{"text":"SignalHandler","kind":"typeIdentifier","preciseIdentifier":"s:13SignalHandlerAAC"}],"title":"default","type":"topic","abstract":[{"type":"text","text":"A simple singleton for the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/SignalHandler\/documentation\/SignalHandler"},{"type":"text","text":" type"}],"url":"\/documentation\/signalhandler\/signalhandler\/default","identifier":"doc:\/\/SignalHandler\/documentation\/SignalHandler\/SignalHandler\/default"},"doc://SignalHandler/12_Concurrency8AnyActorP":{"title":"_Concurrency.AnyActor","type":"unresolvable","identifier":"doc:\/\/SignalHandler\/12_Concurrency8AnyActorP"},"doc://SignalHandler/s8SendableP":{"title":"Swift.Sendable","type":"unresolvable","identifier":"doc:\/\/SignalHandler\/s8SendableP"},"doc://SignalHandler/documentation/SignalHandler/SignalHandler/init(signals:handler:)-2t65u":{"role":"symbol","kind":"symbol","fragments":[{"text":"init","kind":"identifier"},{"text":"(","kind":"text"},{"text":"signals","kind":"externalParam"},{"text":": [","kind":"text"},{"text":"Signals","kind":"typeIdentifier","preciseIdentifier":"s:13SignalHandler7SignalsO"},{"text":"], ","kind":"text"},{"text":"handler","kind":"externalParam"},{"text":": ((","kind":"text"},{"text":"Int32","kind":"typeIdentifier","preciseIdentifier":"s:s5Int32V"},{"text":") -> ()))","kind":"text"}],"title":"init(signals:handler:)","type":"topic","abstract":[{"type":"text","text":"Instantiates this type"}],"url":"\/documentation\/signalhandler\/signalhandler\/init(signals:handler:)-2t65u","identifier":"doc:\/\/SignalHandler\/documentation\/SignalHandler\/SignalHandler\/init(signals:handler:)-2t65u"},"doc://SignalHandler/documentation/SignalHandler/SignalHandler/start(with:handler:)":{"abstract":[{"text":"Start handling signals","type":"text"}],"title":"start(with:handler:)","role":"symbol","url":"\/documentation\/signalhandler\/signalhandler\/start(with:handler:)","identifier":"doc:\/\/SignalHandler\/documentation\/SignalHandler\/SignalHandler\/start(with:handler:)","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"start"},{"kind":"text","text":"("},{"kind":"externalParam","text":"with"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:13SignalHandler7SignalsO","text":"Signals"},{"kind":"text","text":"..., "},{"kind":"externalParam","text":"handler"},{"kind":"text","text":": (("},{"kind":"typeIdentifier","preciseIdentifier":"s:s5Int32V","text":"Int32"},{"kind":"text","text":") -> ())) "},{"kind":"keyword","text":"async"}],"kind":"symbol","type":"topic"},"doc://SignalHandler/SQ":{"title":"Swift.Equatable","type":"unresolvable","identifier":"doc:\/\/SignalHandler\/SQ"},"doc://SignalHandler/documentation/SignalHandler/SignalHandler/start(with:completion:)":{"abstract":[{"text":"Start handling signals","type":"text"}],"title":"start(with:completion:)","role":"symbol","url":"\/documentation\/signalhandler\/signalhandler\/start(with:completion:)","identifier":"doc:\/\/SignalHandler\/documentation\/SignalHandler\/SignalHandler\/start(with:completion:)","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"start"},{"kind":"text","text":"("},{"kind":"externalParam","text":"with"},{"kind":"text","text":": ["},{"kind":"typeIdentifier","preciseIdentifier":"s:13SignalHandler7SignalsO","text":"Signals"},{"kind":"text","text":"], "},{"kind":"externalParam","text":"completion"},{"kind":"text","text":": (("},{"kind":"typeIdentifier","preciseIdentifier":"s:s5Int32V","text":"Int32"},{"kind":"text","text":") -> ())) "},{"kind":"keyword","text":"async"}],"kind":"symbol","type":"topic"},"doc://SignalHandler/documentation/SignalHandler":{"identifier":"doc:\/\/SignalHandler\/documentation\/SignalHandler","url":"\/documentation\/signalhandler","kind":"symbol","type":"topic","role":"collection","title":"SignalHandler","abstract":[]},"doc://SignalHandler/ScA":{"title":"_Concurrency.Actor","type":"unresolvable","identifier":"doc:\/\/SignalHandler\/ScA"},"doc://SignalHandler/documentation/SignalHandler/SignalHandler/handler":{"role":"symbol","kind":"symbol","fragments":[{"text":"let","kind":"keyword"},{"text":" ","kind":"text"},{"text":"handler","kind":"identifier"},{"text":": ((","kind":"text"},{"text":"Int32","kind":"typeIdentifier","preciseIdentifier":"s:s5Int32V"},{"text":") -> ())","kind":"text"}],"title":"handler","type":"topic","abstract":[{"type":"text","text":"Callback to run if any registered signal is caught"}],"url":"\/documentation\/signalhandler\/signalhandler\/handler","identifier":"doc:\/\/SignalHandler\/documentation\/SignalHandler\/SignalHandler\/handler"},"doc://SignalHandler/documentation/SignalHandler/SignalHandler/Equatable-Implementations":{"identifier":"doc:\/\/SignalHandler\/documentation\/SignalHandler\/SignalHandler\/Equatable-Implementations","url":"\/documentation\/signalhandler\/signalhandler\/equatable-implementations","kind":"article","type":"topic","role":"collectionGroup","title":"Equatable Implementations","abstract":[]}}}