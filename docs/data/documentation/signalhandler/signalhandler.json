{"abstract":[{"text":"Handler for most handleable *nix signals","type":"text"}],"schemaVersion":{"patch":0,"minor":3,"major":0},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/signalhandler\/signalhandler"]}],"metadata":{"title":"SignalHandler","externalID":"s:13SignalHandlerAAC","roleHeading":"Class","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"SignalHandler"}],"fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"SignalHandler"}],"symbolKind":"class","modules":[{"name":"SignalHandler"}]},"sections":[],"relationshipsSections":[{"title":"Conforms To","identifiers":["doc:\/\/SignalHandler\/SQ","doc:\/\/SignalHandler\/s8SendableP","doc:\/\/SignalHandler\/ScA","doc:\/\/SignalHandler\/12_Concurrency8AnyActorP"],"kind":"relationships","type":"conformsTo"}],"kind":"symbol","hierarchy":{"paths":[["doc:\/\/SignalHandler\/documentation\/SignalHandler"]]},"primaryContentSections":[{"declarations":[{"tokens":[{"kind":"keyword","text":"actor"},{"kind":"text","text":" "},{"kind":"identifier","text":"SignalHandler"}],"platforms":["Linux"],"languages":["swift"]}],"kind":"declarations"},{"kind":"content","content":[{"anchor":"overview","type":"heading","level":2,"text":"Overview"},{"inlineContent":[{"text":"It catches the signal asynchronously on the fly while executing the callback supplied to it.","type":"text"},{"text":" ","type":"text"},{"text":"It provides a way to clean up and exit if a signal registered is being caught","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"It should always be the first code and its encouraged to run in parallel with ","type":"text"},{"type":"codeVoice","code":"async let"},{"text":" syntax in order to enable it catch signals as soon as your code start executing","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"Always remember to call ","type":"text"},{"identifier":"doc:\/\/SignalHandler\/documentation\/SignalHandler\/SignalHandler\/start()","isActive":true,"type":"reference"},{"text":" otherwise the registered signals wonâ€™t be caught","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"Example of its usage","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["    let exitHandler = SignalHandler(signals: .SIGINT, .SIQUIT) { _ in","        print(\"Closing this program\")","        \/\/ Code to clean up resources used","    }","    async let _ = exitHandler.start()"]},{"inlineContent":[{"text":"Or","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["    Task {","        let exithandler = SignalHandler(signals: .SIGINT, .SIQUIT) { _ in","            print(\"Closing this program\")","            \/\/ Code to clean up resources used","        }","        await exithandler.start()","    }"]}]}],"identifier":{"url":"doc:\/\/SignalHandler\/documentation\/SignalHandler\/SignalHandler","interfaceLanguage":"swift"},"topicSections":[{"title":"Initializers","identifiers":["doc:\/\/SignalHandler\/documentation\/SignalHandler\/SignalHandler\/init(signals:handler:)-2p7ww","doc:\/\/SignalHandler\/documentation\/SignalHandler\/SignalHandler\/init(signals:handler:)-2t65u"]},{"title":"Instance Properties","identifiers":["doc:\/\/SignalHandler\/documentation\/SignalHandler\/SignalHandler\/handler","doc:\/\/SignalHandler\/documentation\/SignalHandler\/SignalHandler\/signals"]},{"title":"Instance Methods","identifiers":["doc:\/\/SignalHandler\/documentation\/SignalHandler\/SignalHandler\/start()"]},{"title":"Type Properties","identifiers":["doc:\/\/SignalHandler\/documentation\/SignalHandler\/SignalHandler\/default"]},{"title":"Type Methods","identifiers":["doc:\/\/SignalHandler\/documentation\/SignalHandler\/SignalHandler\/start(with:completion:)","doc:\/\/SignalHandler\/documentation\/SignalHandler\/SignalHandler\/start(with:handler:)"]},{"title":"Default Implementations","generated":true,"identifiers":["doc:\/\/SignalHandler\/documentation\/SignalHandler\/SignalHandler\/Equatable-Implementations"]}],"references":{"doc://SignalHandler/documentation/SignalHandler/SignalHandler/Equatable-Implementations":{"abstract":[],"kind":"article","title":"Equatable Implementations","role":"collectionGroup","type":"topic","identifier":"doc:\/\/SignalHandler\/documentation\/SignalHandler\/SignalHandler\/Equatable-Implementations","url":"\/documentation\/signalhandler\/signalhandler\/equatable-implementations"},"doc://SignalHandler/documentation/SignalHandler/SignalHandler/init(signals:handler:)-2t65u":{"url":"\/documentation\/signalhandler\/signalhandler\/init(signals:handler:)-2t65u","abstract":[{"type":"text","text":"Instantiates this type"}],"role":"symbol","title":"init(signals:handler:)","fragments":[{"text":"init","kind":"identifier"},{"text":"(","kind":"text"},{"text":"signals","kind":"externalParam"},{"text":": [","kind":"text"},{"preciseIdentifier":"s:13SignalHandler7SignalsO","text":"Signals","kind":"typeIdentifier"},{"text":"], ","kind":"text"},{"text":"handler","kind":"externalParam"},{"kind":"text","text":": (("},{"kind":"typeIdentifier","preciseIdentifier":"s:s5Int32V","text":"Int32"},{"kind":"text","text":") -> ()))"}],"identifier":"doc:\/\/SignalHandler\/documentation\/SignalHandler\/SignalHandler\/init(signals:handler:)-2t65u","type":"topic","kind":"symbol"},"doc://SignalHandler/documentation/SignalHandler/SignalHandler/handler":{"identifier":"doc:\/\/SignalHandler\/documentation\/SignalHandler\/SignalHandler\/handler","role":"symbol","kind":"symbol","type":"topic","abstract":[{"text":"Callback to run if any registered signal is caught","type":"text"}],"fragments":[{"kind":"keyword","text":"let"},{"text":" ","kind":"text"},{"text":"handler","kind":"identifier"},{"text":": ((","kind":"text"},{"preciseIdentifier":"s:s5Int32V","text":"Int32","kind":"typeIdentifier"},{"text":") -> ())","kind":"text"}],"url":"\/documentation\/signalhandler\/signalhandler\/handler","title":"handler"},"doc://SignalHandler/documentation/SignalHandler/SignalHandler":{"fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"SignalHandler"}],"navigatorTitle":[{"text":"SignalHandler","kind":"identifier"}],"abstract":[{"type":"text","text":"Handler for most handleable *nix signals"}],"kind":"symbol","title":"SignalHandler","role":"symbol","type":"topic","url":"\/documentation\/signalhandler\/signalhandler","identifier":"doc:\/\/SignalHandler\/documentation\/SignalHandler\/SignalHandler"},"doc://SignalHandler/documentation/SignalHandler/SignalHandler/start(with:handler:)":{"abstract":[{"type":"text","text":"Start handling signals"}],"kind":"symbol","title":"start(with:handler:)","role":"symbol","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"start"},{"kind":"text","text":"("},{"kind":"externalParam","text":"with"},{"kind":"text","text":": "},{"preciseIdentifier":"s:13SignalHandler7SignalsO","text":"Signals","kind":"typeIdentifier"},{"text":"..., ","kind":"text"},{"text":"handler","kind":"externalParam"},{"text":": ((","kind":"text"},{"preciseIdentifier":"s:s5Int32V","text":"Int32","kind":"typeIdentifier"},{"text":") -> ())) ","kind":"text"},{"text":"async","kind":"keyword"}],"type":"topic","identifier":"doc:\/\/SignalHandler\/documentation\/SignalHandler\/SignalHandler\/start(with:handler:)","url":"\/documentation\/signalhandler\/signalhandler\/start(with:handler:)"},"doc://SignalHandler/s8SendableP":{"title":"Swift.Sendable","type":"unresolvable","identifier":"doc:\/\/SignalHandler\/s8SendableP"},"doc://SignalHandler/documentation/SignalHandler/SignalHandler/signals":{"role":"symbol","identifier":"doc:\/\/SignalHandler\/documentation\/SignalHandler\/SignalHandler\/signals","kind":"symbol","url":"\/documentation\/signalhandler\/signalhandler\/signals","abstract":[{"text":"Signals registered to be handled","type":"text"}],"title":"signals","fragments":[{"text":"let","kind":"keyword"},{"text":" ","kind":"text"},{"text":"signals","kind":"identifier"},{"text":": [","kind":"text"},{"preciseIdentifier":"s:13SignalHandler7SignalsO","kind":"typeIdentifier","text":"Signals"},{"kind":"text","text":"]"}],"type":"topic"},"doc://SignalHandler/documentation/SignalHandler":{"role":"collection","url":"\/documentation\/signalhandler","kind":"symbol","title":"SignalHandler","type":"topic","identifier":"doc:\/\/SignalHandler\/documentation\/SignalHandler","abstract":[]},"doc://SignalHandler/ScA":{"title":"_Concurrency.Actor","type":"unresolvable","identifier":"doc:\/\/SignalHandler\/ScA"},"doc://SignalHandler/SQ":{"title":"Swift.Equatable","type":"unresolvable","identifier":"doc:\/\/SignalHandler\/SQ"},"doc://SignalHandler/documentation/SignalHandler/SignalHandler/default":{"abstract":[{"type":"text","text":"A simple singleton for the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/SignalHandler\/documentation\/SignalHandler"},{"type":"text","text":" type"}],"kind":"symbol","title":"default","role":"symbol","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"let"},{"kind":"text","text":" "},{"kind":"identifier","text":"`default`"},{"kind":"text","text":": "},{"preciseIdentifier":"s:13SignalHandlerAAC","text":"SignalHandler","kind":"typeIdentifier"}],"type":"topic","identifier":"doc:\/\/SignalHandler\/documentation\/SignalHandler\/SignalHandler\/default","url":"\/documentation\/signalhandler\/signalhandler\/default"},"doc://SignalHandler/12_Concurrency8AnyActorP":{"title":"_Concurrency.AnyActor","type":"unresolvable","identifier":"doc:\/\/SignalHandler\/12_Concurrency8AnyActorP"},"doc://SignalHandler/documentation/SignalHandler/SignalHandler/init(signals:handler:)-2p7ww":{"fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"signals"},{"text":": ","kind":"text"},{"text":"Signals","preciseIdentifier":"s:13SignalHandler7SignalsO","kind":"typeIdentifier"},{"text":"..., ","kind":"text"},{"text":"handler","kind":"externalParam"},{"text":": ((","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:s5Int32V","text":"Int32"},{"kind":"text","text":") -> ()))"}],"abstract":[{"type":"text","text":"Instantiates this type"}],"kind":"symbol","title":"init(signals:handler:)","role":"symbol","type":"topic","url":"\/documentation\/signalhandler\/signalhandler\/init(signals:handler:)-2p7ww","identifier":"doc:\/\/SignalHandler\/documentation\/SignalHandler\/SignalHandler\/init(signals:handler:)-2p7ww"},"doc://SignalHandler/documentation/SignalHandler/SignalHandler/start()":{"role":"symbol","identifier":"doc:\/\/SignalHandler\/documentation\/SignalHandler\/SignalHandler\/start()","kind":"symbol","url":"\/documentation\/signalhandler\/signalhandler\/start()","abstract":[{"text":"Starts handling ","type":"text"},{"identifier":"doc:\/\/SignalHandler\/documentation\/SignalHandler\/SignalHandler\/signals","isActive":true,"type":"reference"},{"text":" registered asynchronously as they being caught","type":"text"}],"title":"start()","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"start"},{"kind":"text","text":"() "},{"kind":"keyword","text":"async"}],"type":"topic"},"doc://SignalHandler/documentation/SignalHandler/SignalHandler/start(with:completion:)":{"role":"symbol","identifier":"doc:\/\/SignalHandler\/documentation\/SignalHandler\/SignalHandler\/start(with:completion:)","kind":"symbol","url":"\/documentation\/signalhandler\/signalhandler\/start(with:completion:)","abstract":[{"text":"Start handling signals","type":"text"}],"title":"start(with:completion:)","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"start"},{"kind":"text","text":"("},{"kind":"externalParam","text":"with"},{"kind":"text","text":": ["},{"preciseIdentifier":"s:13SignalHandler7SignalsO","kind":"typeIdentifier","text":"Signals"},{"kind":"text","text":"], "},{"kind":"externalParam","text":"completion"},{"kind":"text","text":": (("},{"preciseIdentifier":"s:s5Int32V","kind":"typeIdentifier","text":"Int32"},{"kind":"text","text":") -> ())) "},{"kind":"keyword","text":"async"}],"type":"topic"}}}