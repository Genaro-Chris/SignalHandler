{"hierarchy":{"paths":[["doc:\/\/SignalHandler\/documentation\/SignalHandler","doc:\/\/SignalHandler\/documentation\/SignalHandler\/SignalHandler"]]},"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"tokens":[{"kind":"keyword","text":"let"},{"kind":"text","text":" "},{"kind":"identifier","text":"handler"},{"kind":"text","text":": (("},{"kind":"typeIdentifier","preciseIdentifier":"s:s5Int32V","text":"Int32"},{"kind":"text","text":") -> ())"}],"platforms":["Linux"]}]},{"kind":"content","content":[{"text":"Discussion","level":2,"type":"heading","anchor":"discussion"},{"type":"paragraph","inlineContent":[{"text":"This callback canâ€™t be any function associated with a type such as instance or type methods, just a plain old closure","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Code example","type":"text"}]},{"code":["   let callback: (Int32) -> () ","    callback = { value in","        print(\"This is a callback handler\")","    }"],"type":"codeListing","syntax":"swift"}]}],"metadata":{"roleHeading":"Instance Property","fragments":[{"text":"let","kind":"keyword"},{"text":" ","kind":"text"},{"text":"handler","kind":"identifier"},{"text":": ((","kind":"text"},{"text":"Int32","kind":"typeIdentifier","preciseIdentifier":"s:s5Int32V"},{"text":") -> ())","kind":"text"}],"title":"handler","externalID":"s:13SignalHandlerAAC7handleryys5Int32VXCvp","role":"symbol","modules":[{"name":"SignalHandler"}],"symbolKind":"property"},"abstract":[{"type":"text","text":"Callback to run if any registered signal is caught"}],"variants":[{"paths":["\/documentation\/signalhandler\/signalhandler\/handler"],"traits":[{"interfaceLanguage":"swift"}]}],"schemaVersion":{"minor":3,"major":0,"patch":0},"kind":"symbol","sections":[],"identifier":{"url":"doc:\/\/SignalHandler\/documentation\/SignalHandler\/SignalHandler\/handler","interfaceLanguage":"swift"},"references":{"doc://SignalHandler/documentation/SignalHandler/SignalHandler/handler":{"fragments":[{"kind":"keyword","text":"let"},{"kind":"text","text":" "},{"kind":"identifier","text":"handler"},{"kind":"text","text":": (("},{"kind":"typeIdentifier","preciseIdentifier":"s:s5Int32V","text":"Int32"},{"kind":"text","text":") -> ())"}],"abstract":[{"text":"Callback to run if any registered signal is caught","type":"text"}],"role":"symbol","title":"handler","kind":"symbol","type":"topic","url":"\/documentation\/signalhandler\/signalhandler\/handler","identifier":"doc:\/\/SignalHandler\/documentation\/SignalHandler\/SignalHandler\/handler"},"doc://SignalHandler/documentation/SignalHandler/SignalHandler":{"title":"SignalHandler","type":"topic","abstract":[{"text":"Handler for most handleable *nix signals","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"SignalHandler"}],"url":"\/documentation\/signalhandler\/signalhandler","identifier":"doc:\/\/SignalHandler\/documentation\/SignalHandler\/SignalHandler","role":"symbol","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"SignalHandler"}],"kind":"symbol"},"doc://SignalHandler/documentation/SignalHandler":{"url":"\/documentation\/signalhandler","abstract":[],"role":"collection","kind":"symbol","title":"SignalHandler","type":"topic","identifier":"doc:\/\/SignalHandler\/documentation\/SignalHandler"}}}