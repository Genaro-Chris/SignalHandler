{"kind":"symbol","hierarchy":{"paths":[["doc:\/\/SignalHandler\/documentation\/SignalHandler","doc:\/\/SignalHandler\/documentation\/SignalHandler\/SignalHandler"]]},"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"platforms":["Linux"],"tokens":[{"text":"let","kind":"keyword"},{"text":" ","kind":"text"},{"text":"handler","kind":"identifier"},{"text":": ((","kind":"text"},{"text":"Int32","preciseIdentifier":"s:s5Int32V","kind":"typeIdentifier"},{"text":") -> ())","kind":"text"}]}]},{"content":[{"text":"Discussion","anchor":"discussion","level":2,"type":"heading"},{"inlineContent":[{"type":"text","text":"This callback canâ€™t be any function associated with a type such as instance or type methods, just a plain old closure"}],"type":"paragraph"},{"inlineContent":[{"text":"Code example","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["   let callback: (Int32) -> () ","    callback = { value in","        print(\"This is a callback handler\")","    }"],"syntax":"swift"}],"kind":"content"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/signalhandler\/signalhandler\/handler"]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/SignalHandler\/documentation\/SignalHandler\/SignalHandler\/handler"},"sections":[],"abstract":[{"text":"Callback to run if any registered signal is caught","type":"text"}],"metadata":{"externalID":"s:13SignalHandlerAAC7handleryys5Int32VXCvp","fragments":[{"text":"let","kind":"keyword"},{"text":" ","kind":"text"},{"text":"handler","kind":"identifier"},{"text":": ((","kind":"text"},{"preciseIdentifier":"s:s5Int32V","text":"Int32","kind":"typeIdentifier"},{"text":") -> ())","kind":"text"}],"modules":[{"name":"SignalHandler"}],"roleHeading":"Instance Property","symbolKind":"property","role":"symbol","title":"handler"},"schemaVersion":{"minor":3,"major":0,"patch":0},"references":{"doc://SignalHandler/documentation/SignalHandler/SignalHandler/handler":{"abstract":[{"type":"text","text":"Callback to run if any registered signal is caught"}],"kind":"symbol","identifier":"doc:\/\/SignalHandler\/documentation\/SignalHandler\/SignalHandler\/handler","title":"handler","url":"\/documentation\/signalhandler\/signalhandler\/handler","type":"topic","role":"symbol","fragments":[{"text":"let","kind":"keyword"},{"text":" ","kind":"text"},{"text":"handler","kind":"identifier"},{"text":": ((","kind":"text"},{"text":"Int32","preciseIdentifier":"s:s5Int32V","kind":"typeIdentifier"},{"text":") -> ())","kind":"text"}]},"doc://SignalHandler/documentation/SignalHandler/SignalHandler":{"role":"symbol","type":"topic","title":"SignalHandler","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"SignalHandler"}],"fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"kind":"identifier","text":"SignalHandler"}],"url":"\/documentation\/signalhandler\/signalhandler","abstract":[{"text":"Handler for most handleable *nix signals","type":"text"}],"identifier":"doc:\/\/SignalHandler\/documentation\/SignalHandler\/SignalHandler"},"doc://SignalHandler/documentation/SignalHandler":{"identifier":"doc:\/\/SignalHandler\/documentation\/SignalHandler","url":"\/documentation\/signalhandler","title":"SignalHandler","type":"topic","kind":"symbol","role":"collection","abstract":[]}}}