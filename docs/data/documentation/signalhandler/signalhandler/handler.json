{"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/SignalHandler\/documentation\/SignalHandler\/SignalHandler\/handler"},"primaryContentSections":[{"declarations":[{"languages":["swift"],"tokens":[{"text":"let","kind":"keyword"},{"text":" ","kind":"text"},{"text":"handler","kind":"identifier"},{"text":": ((","kind":"text"},{"text":"Int32","kind":"typeIdentifier","preciseIdentifier":"s:s5Int32V"},{"kind":"text","text":") -> ())"}],"platforms":["Linux"]}],"kind":"declarations"},{"kind":"content","content":[{"type":"heading","anchor":"discussion","level":2,"text":"Discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This callback canâ€™t be any function associated with a type such as instance or type methods, just a plain old closure"}]},{"type":"paragraph","inlineContent":[{"text":"Code example","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["   let callback: (Int32) -> () ","    callback = { value in","        print(\"This is a callback handler\")","    }"]}]}],"metadata":{"title":"handler","role":"symbol","roleHeading":"Instance Property","modules":[{"name":"SignalHandler"}],"fragments":[{"text":"let","kind":"keyword"},{"text":" ","kind":"text"},{"text":"handler","kind":"identifier"},{"text":": ((","kind":"text"},{"preciseIdentifier":"s:s5Int32V","text":"Int32","kind":"typeIdentifier"},{"text":") -> ())","kind":"text"}],"externalID":"s:13SignalHandlerAAC7handleryys5Int32VXCvp","symbolKind":"property"},"hierarchy":{"paths":[["doc:\/\/SignalHandler\/documentation\/SignalHandler","doc:\/\/SignalHandler\/documentation\/SignalHandler\/SignalHandler"]]},"schemaVersion":{"major":0,"patch":0,"minor":3},"abstract":[{"text":"Callback to run if any registered signal is caught","type":"text"}],"variants":[{"paths":["\/documentation\/signalhandler\/signalhandler\/handler"],"traits":[{"interfaceLanguage":"swift"}]}],"kind":"symbol","sections":[],"references":{"doc://SignalHandler/documentation/SignalHandler/SignalHandler/handler":{"identifier":"doc:\/\/SignalHandler\/documentation\/SignalHandler\/SignalHandler\/handler","title":"handler","type":"topic","url":"\/documentation\/signalhandler\/signalhandler\/handler","abstract":[{"text":"Callback to run if any registered signal is caught","type":"text"}],"fragments":[{"kind":"keyword","text":"let"},{"kind":"text","text":" "},{"kind":"identifier","text":"handler"},{"kind":"text","text":": (("},{"kind":"typeIdentifier","text":"Int32","preciseIdentifier":"s:s5Int32V"},{"kind":"text","text":") -> ())"}],"role":"symbol","kind":"symbol"},"doc://SignalHandler/documentation/SignalHandler/SignalHandler":{"abstract":[{"text":"Handler for most handleable *nix signals","type":"text"}],"identifier":"doc:\/\/SignalHandler\/documentation\/SignalHandler\/SignalHandler","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"SignalHandler","kind":"identifier"}],"type":"topic","title":"SignalHandler","navigatorTitle":[{"text":"SignalHandler","kind":"identifier"}],"url":"\/documentation\/signalhandler\/signalhandler","kind":"symbol","role":"symbol"},"doc://SignalHandler/documentation/SignalHandler":{"kind":"symbol","role":"collection","identifier":"doc:\/\/SignalHandler\/documentation\/SignalHandler","abstract":[],"url":"\/documentation\/signalhandler","type":"topic","title":"SignalHandler"}}}