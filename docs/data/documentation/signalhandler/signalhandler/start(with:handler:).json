{"variants":[{"paths":["\/documentation\/signalhandler\/signalhandler\/start(with:handler:)"],"traits":[{"interfaceLanguage":"swift"}]}],"schemaVersion":{"patch":0,"minor":3,"major":0},"metadata":{"roleHeading":"Type Method","modules":[{"name":"SignalHandler"}],"externalID":"s:13SignalHandlerAAC5start4with7handleryAA7SignalsOd_ys5Int32VXCtYaFZ","symbolKind":"method","role":"symbol","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"start","kind":"identifier"},{"text":"(","kind":"text"},{"text":"with","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:13SignalHandler7SignalsO","text":"Signals","kind":"typeIdentifier"},{"kind":"text","text":"..., "},{"kind":"externalParam","text":"handler"},{"kind":"text","text":": (("},{"kind":"typeIdentifier","text":"Int32","preciseIdentifier":"s:s5Int32V"},{"kind":"text","text":") -> ())) "},{"kind":"keyword","text":"async"}],"title":"start(with:handler:)"},"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"tokens":[{"text":"nonisolated","kind":"keyword"},{"text":" ","kind":"text"},{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"start","kind":"identifier"},{"text":"(","kind":"text"},{"text":"with","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"signals","kind":"internalParam"},{"text":": ","kind":"text"},{"text":"Signals","preciseIdentifier":"s:13SignalHandler7SignalsO","identifier":"doc:\/\/SignalHandler\/documentation\/SignalHandler\/Signals","kind":"typeIdentifier"},{"text":"..., ","kind":"text"},{"text":"handler","kind":"externalParam"},{"text":": ((","kind":"text"},{"text":"Int32","preciseIdentifier":"s:s5Int32V","kind":"typeIdentifier"},{"text":") -> ())) ","kind":"text"},{"text":"async","kind":"keyword"}],"platforms":["Linux"]}]},{"kind":"parameters","parameters":[{"content":[{"inlineContent":[{"type":"text","text":"Variadic signals to register"}],"type":"paragraph"}],"name":"signals"},{"content":[{"type":"paragraph","inlineContent":[{"text":"callback to execute when the signals are being caught","type":"text"}]}],"name":"handler"}]},{"kind":"content","content":[{"anchor":"discussion","level":2,"text":"Discussion","type":"heading"},{"inlineContent":[{"text":"Provides a quick way to start handle signals without the stress of instantiating the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/SignalHandler\/documentation\/SignalHandler"},{"text":" type and starting the handler by calling ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/SignalHandler\/documentation\/SignalHandler\/SignalHandler\/start()"},{"text":" with just","type":"text"},{"text":" ","type":"text"},{"text":"one line or few lines of codes","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Code example of this method usage:"}],"type":"paragraph"},{"syntax":"swift","code":["    async let signalHandler = SignalHandler.start(with: .SIGINT, .SIGQUIT, .SIGTSTP) { _ in","        \/\/ Code to clean up resources held","        print(\"Quitting\")","    }"],"type":"codeListing"}]}],"abstract":[{"text":"Start handling signals","type":"text"}],"identifier":{"url":"doc:\/\/SignalHandler\/documentation\/SignalHandler\/SignalHandler\/start(with:handler:)","interfaceLanguage":"swift"},"kind":"symbol","hierarchy":{"paths":[["doc:\/\/SignalHandler\/documentation\/SignalHandler","doc:\/\/SignalHandler\/documentation\/SignalHandler\/SignalHandler"]]},"sections":[],"references":{"doc://SignalHandler/documentation/SignalHandler/SignalHandler/start()":{"kind":"symbol","url":"\/documentation\/signalhandler\/signalhandler\/start()","identifier":"doc:\/\/SignalHandler\/documentation\/SignalHandler\/SignalHandler\/start()","role":"symbol","title":"start()","abstract":[{"type":"text","text":"Starts handling "},{"type":"reference","isActive":true,"identifier":"doc:\/\/SignalHandler\/documentation\/SignalHandler\/SignalHandler\/signals"},{"type":"text","text":" registered asynchronously as they being caught"}],"fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"start","kind":"identifier"},{"text":"() ","kind":"text"},{"text":"async","kind":"keyword"}],"type":"topic"},"doc://SignalHandler/documentation/SignalHandler/Signals":{"abstract":[{"text":"*Nix signals","type":"text"}],"identifier":"doc:\/\/SignalHandler\/documentation\/SignalHandler\/Signals","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"Signals"}],"type":"topic","title":"Signals","navigatorTitle":[{"kind":"identifier","text":"Signals"}],"url":"\/documentation\/signalhandler\/signals","kind":"symbol","role":"symbol"},"doc://SignalHandler/documentation/SignalHandler/SignalHandler":{"abstract":[{"text":"Handler for most handleable *nix signals","type":"text"}],"identifier":"doc:\/\/SignalHandler\/documentation\/SignalHandler\/SignalHandler","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"SignalHandler","kind":"identifier"}],"type":"topic","title":"SignalHandler","navigatorTitle":[{"text":"SignalHandler","kind":"identifier"}],"url":"\/documentation\/signalhandler\/signalhandler","kind":"symbol","role":"symbol"},"doc://SignalHandler/documentation/SignalHandler/SignalHandler/start(with:handler:)":{"kind":"symbol","url":"\/documentation\/signalhandler\/signalhandler\/start(with:handler:)","identifier":"doc:\/\/SignalHandler\/documentation\/SignalHandler\/SignalHandler\/start(with:handler:)","role":"symbol","title":"start(with:handler:)","abstract":[{"type":"text","text":"Start handling signals"}],"fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"start","kind":"identifier"},{"text":"(","kind":"text"},{"text":"with","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:13SignalHandler7SignalsO","text":"Signals","kind":"typeIdentifier"},{"text":"..., ","kind":"text"},{"text":"handler","kind":"externalParam"},{"text":": ((","kind":"text"},{"preciseIdentifier":"s:s5Int32V","text":"Int32","kind":"typeIdentifier"},{"text":") -> ())) ","kind":"text"},{"text":"async","kind":"keyword"}],"type":"topic"},"doc://SignalHandler/documentation/SignalHandler":{"kind":"symbol","role":"collection","identifier":"doc:\/\/SignalHandler\/documentation\/SignalHandler","abstract":[],"url":"\/documentation\/signalhandler","type":"topic","title":"SignalHandler"},"doc://SignalHandler/documentation/SignalHandler/SignalHandler/signals":{"kind":"symbol","url":"\/documentation\/signalhandler\/signalhandler\/signals","identifier":"doc:\/\/SignalHandler\/documentation\/SignalHandler\/SignalHandler\/signals","role":"symbol","title":"signals","abstract":[{"type":"text","text":"Signals registered to be handled"}],"fragments":[{"kind":"keyword","text":"let"},{"kind":"text","text":" "},{"kind":"identifier","text":"signals"},{"text":": [","kind":"text"},{"preciseIdentifier":"s:13SignalHandler7SignalsO","text":"Signals","kind":"typeIdentifier"},{"text":"]","kind":"text"}],"type":"topic"}}}